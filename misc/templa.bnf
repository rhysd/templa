PROGRAM    : DECL_FUNC {"\n" DECL_FUNC}
DECL_FUNC  : FUNC_NAME ["(" DECL_PARAMS ")"] "=" STMT
DECL_PARAMS : DECL_PARAM {"," DECL_PARAM}
DECL_PARAM : LIST_MATCH | TYPE_MATCH | PARAM_NAME
LIST_MATCH : ELEM_NAME ":" {ELEM_NAME ":"} ELEMS_NAME
TYPE_MATCH : PARAM_NAME "::" TYPE_NAME
STMT       : (LET_STMT | IF_STMT | CASE_STMT | EXPR) "\n"
LET_STMT   : "let" DECL_FUNC {"\n" DECL_FUNC} "in"
IF_STMT    : "if" EXPR "then" EXPR "else" EXPR
CASE_STMT  : "case" "\n" {CASE_WHEN "\n"} "|" "otherwise" EXPR
CASE_WHEN  : "|" EXPR "then" EXPR
EXPR       : HOGE {RELATIONAL_OP HOGE}
HOGE       : ["+" | "-"] TERM {ADDITIVE_OP TERM}
TERM       : FACTOR {MULT_OP FACTOR}
FACTOR     : CONSTANT | FUNC_CALL | "!" FACTOR | "(" EXPR ")"
RELATIONAL_OP : "==" | "!=" | "<" | ">" | "<=" | ">="
ADDITIVE_OP : "+" | "-" | "|" | "||"
MULT_OP    : "*" | "/" | "%" | "&" | "&&"
CONSTANT   : INTEGER | CHAR | BOOL | STRING | LIST
LIST       : "[" [ EXPR {"," }] "]"
           | "[" INTEGER ".." INTEGER "]"
           | "[" CHAR ".." CHAR "]"
FUNC_CALL  : FUNC_NAME ["(" CALL_ARGS ")"]
CALL_ARGS  : EXPR {"," EXPR}
